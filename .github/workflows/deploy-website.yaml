name: Deploy Website to S3

on:
  push:
    branches:
      - 'main'
      - 'devops-engineers'
      - 'web-developers'
    paths:
      - 'website/**'  # Matches your simplified structure
      - '.github/workflows/deploy-website.yaml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - invalidate-cache

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: "us-east-1"
  TF_WORKING_DIR: "terraform/infra"

jobs:
  deploy:
    name: Deploy Website
    runs-on: ubuntu-latest
    environment: ${{ contains(github.ref, 'main') && 'production' || 'staging' }}
    outputs:
      bucket-name: ${{ steps.deploy-step.outputs.bucket-name }}
      cloudfront-url: ${{ steps.invalidate-step.outputs.cloudfront-url }}
    
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: github-actions-deploy

    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Dependencies
      working-directory: website
      run: npm install

    - name: Build Website
      working-directory: website
      run: |
        echo "Building React application for production..."
        npm run build:prod
        echo "Build completed. Contents of dist/:"
        ls -la dist/
        echo "Checking for index.html:"
        test -f dist/index.html && echo "✅ index.html found" || echo "❌ index.html missing"

    - name: Debug Repository Structure
      run: |
        echo "=== DEBUGGING REPOSITORY STRUCTURE ==="
        echo "Current working directory: $(pwd)"
        echo "Root directory contents:"
        ls -la
        echo ""
        echo "Website directory contents:"
        ls -la website/
        echo ""
        echo "Built website contents (dist/):"
        ls -la website/dist/
        echo "=== END DEBUGGING ===

    - name: Deploy to S3
      id: deploy-step
      if: github.event.inputs.action != 'invalidate-cache'
      working-directory: website/dist  # Deploy from built files
      run: |
        BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
        
        echo "=== STARTING DEPLOYMENT ==="
        echo "Working directory: $(pwd)"
        echo "Files to deploy:"
        ls -la
        echo ""
        
        # Upload files directly to S3 bucket root (no prefix)
        # This works with the simplified CloudFront configuration
        
        # Sync HTML files with no-cache headers (for dynamic content)
        echo "Syncing HTML files..."
        aws s3 sync . s3://$BUCKET_NAME/ \
          --cache-control "no-cache, no-store, must-revalidate" \
          --exclude "*" \
          --include "*.html" \
          --delete
        
        # Sync CSS and JS files with medium cache
        echo "Syncing CSS and JS files..."
        aws s3 sync . s3://$BUCKET_NAME/ \
          --cache-control "public, max-age=604800" \
          --exclude "*" \
          --include "*.css" \
          --include "*.js"
        
        # Sync image and other static assets with long cache
        echo "Syncing static assets..."
        aws s3 sync . s3://$BUCKET_NAME/ \
          --cache-control "public, max-age=2592000" \
          --exclude "*" \
          --include "*.png" --include "*.jpg" --include "*.jpeg" \
          --include "*.svg" --include "*.ico" --include "*.json" \
          --include "*.pdf" --include "*.woff" --include "*.woff2"
        
        # Sync asset directories
        echo "Syncing asset directories..."
        aws s3 sync . s3://$BUCKET_NAME/ \
          --cache-control "public, max-age=2592000" \
          --exclude "*" \
          --include "assets/**" \
          --include "css/**" \
          --include "js/**" \
          --include "styles/**" \
          --include "components/**" \
          --include "images/**"
        
        # Final sync for any remaining files
        echo "Final sync for remaining files..."
        aws s3 sync . s3://$BUCKET_NAME/ \
          --cache-control "public, max-age=86400"
        
        # Verify upload
        echo ""
        echo "=== VERIFYING DEPLOYMENT ==="
        echo "Files now in S3 bucket:"
        aws s3 ls s3://$BUCKET_NAME/ --recursive --human-readable --summarize
        
        echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
        echo "Website successfully uploaded to S3 bucket: $BUCKET_NAME"

    - name: Invalidate CloudFront Cache
      id: invalidate-step
      if: github.event.inputs.action == 'invalidate-cache' || github.event_name == 'push' || github.event.inputs.action == 'deploy'
      run: |
        DISTRIBUTION_ID="${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
        
        if [ -n "$DISTRIBUTION_ID" ]; then
          echo "Creating CloudFront invalidation..."
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "Invalidation created with ID: $INVALIDATION_ID"
          
          # Wait a moment for the invalidation to register
          sleep 5
          
          # Check invalidation status
          aws cloudfront get-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --id $INVALIDATION_ID \
            --query 'Invalidation.Status' \
            --output text
          
          CLOUDFRONT_URL=$(aws cloudfront get-distribution \
            --id $DISTRIBUTION_ID \
            --query 'Distribution.DomainName' \
            --output text)
          
          echo "cloudfront-url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT
          echo "CloudFront URL: https://$CLOUDFRONT_URL"
          echo "Your website should be available at: https://${{ vars.DOMAIN_NAME || 'your-domain.com' }}"
        else
          echo "No CloudFront distribution ID provided, skipping invalidation"
        fi

  notify:
    name: 'Notify Deployment Status'
    needs: [deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Check Job Status
      id: check_status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
        fi

    - name: Send Slack Notification
      if: vars.SLACK_NOTIFICATIONS_ENABLED == 'true'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_COLOR: ${{ steps.check_status.outputs.status == 'success' && 'good' || 'danger' }}
        SLACK_TITLE: "Website Deployment ${{ steps.check_status.outputs.status == 'success' && 'Succeeded' || 'Failed' }}"
        SLACK_MESSAGE: |
          ${{ steps.check_status.outputs.emoji }} **Deployment Status**: ${{ steps.check_status.outputs.status == 'success' && 'SUCCESS' || 'FAILED' }}
          
          **Details:**
          • *Environment*: ${{ contains(github.ref, 'main') && 'Production' || 'Staging' }}
          • *Action*: ${{ github.event.inputs.action || 'deploy' }}
          • *Triggered by*: ${{ github.actor }}
          • *Branch*: `${{ github.ref_name }}`
          • *Commit*: `${{ github.sha }}`
          
          **Infrastructure:**
          • *AWS Region*: ${{ env.AWS_REGION }}
          • *S3 Bucket*: ${{ needs.deploy.outputs.bucket-name || 'N/A' }}
          ${{ needs.deploy.outputs.cloudfront-url && format('• *CloudFront*: https://{0}', needs.deploy.outputs.cloudfront-url) || '• *CloudFront*: Not configured' }}
          
          **Links:**
          • <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>
          ${{ needs.deploy.outputs.bucket-name && format('• <https://{0}.s3-website-{1}.amazonaws.com|S3 Website>', needs.deploy.outputs.bucket-name, env.AWS_REGION) || '' }}
        SLACK_USERNAME: GitHub Actions Bot
        SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
        SLACK_FOOTER: "${{ github.workflow }} #${{ github.run_number }} • ${{ github.repository }}"