name: Deploy Website to S3

on:
  push:
    branches:
      - 'main'
      - 'devops-engineers'
      - 'web-developers'
    paths:
      - 'website/**'
      - '.github/workflows/deploy-website.yaml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - invalidate-cache

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: "us-east-1"
  TF_WORKING_DIR: "terraform/infra"

jobs:
  deploy:
    name: Deploy Website
    runs-on: ubuntu-latest
    environment: ${{ contains(github.ref, 'main') && 'production' || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: github-actions-deploy

    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Deploy to S3
      if: github.event.inputs.action != 'invalidate-cache'
      working-directory: website
      run: |
        BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
        CACHE_CONTROL="public, max-age=31536000"
        
        # Sync files to S3 with appropriate settings
        aws s3 sync . s3://$BUCKET_NAME \
          --delete \
          --cache-control "$CACHE_CONTROL" \
          --exclude "*" \
          --include "*.html" --include "*.css" --include "*.js" \
          --include "*.png" --include "*.jpg" --include "*.jpeg" --include "*.gif" \
          --include "*.svg" --include "*.ico" --include "*.json"
        
        # Sync assets with different cache settings
        aws s3 sync . s3://$BUCKET_NAME \
          --delete \
          --cache-control "public, max-age=86400" \
          --exclude "*" \
          --include "assets/*" \
          --include "css/*" \
          --include "js/*"
        
        echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

    - name: Invalidate CloudFront Cache
      if: github.event.inputs.action != 'deploy' || github.event_name == 'push'
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
        
        CLOUDFRONT_URL=$(aws cloudfront get-distribution --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --query 'Distribution.DomainName' --output text)
        echo "CLOUDFRONT_URL=$CLOUDFRONT_URL" >> $GITHUB_ENV
        echo "Website deployed to: https://${{ env.BUCKET_NAME }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"

  notify:
    name: 'Notify Deployment Status'
    needs: [deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Check Job Status
      id: check_status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Send Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: ${{ steps.check_status.outputs.status == 'success' && 'good' || 'danger' }}
        SLACK_TITLE: "Deployment ${{ steps.check_status.outputs.status == 'success' && 'Succeeded' || 'Failed' }}"
        SLACK_MESSAGE: |
          *Environment*: ${{ contains(github.ref, 'main') && 'Production' || 'Staging' }}
          *Action*: ${{ github.event.inputs.action || 'deploy' }}
          *Status*: ${{ steps.check_status.outputs.status == 'success' && '✅ Success' || '❌ Failed' }}
          *Triggered by*: ${{ github.actor }}
          *Run URL*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>
          
          *AWS Region*: ${{ env.AWS_REGION }}
          *S3 Bucket*: ${{ env.BUCKET_NAME || 'N/A' }}
          ${{ env.CLOUDFRONT_URL && format('*CloudFront*: {0}', env.CLOUDFRONT_URL) || '' }}
          
          *Commit*: `${{ github.sha }}`
          *Branch*: `${{ github.ref_name }}`
        SLACK_USERNAME: GitHub Actions
        SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
        SLACK_FOOTER: "${{ github.workflow }} #${{ github.run_number }}"
