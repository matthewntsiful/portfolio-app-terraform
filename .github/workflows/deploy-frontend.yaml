name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  FRONTEND_DIR: frontend/matthew-ntsiful-portfolio-app

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.FRONTEND_DIR }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test

  build:
    name: Build Project
    needs: test
    runs-on: ubuntu-latest
    outputs:
      build-complete: ${{ steps.build.outputs.build-complete }}
    
    defaults:
      run:
        working-directory: ${{ env.FRONTEND_DIR }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        id: build
        run: |
          npm run build
          echo "build-complete=true" >> $GITHUB_OUTPUT
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_DIR }}/dist
          retention-days: 1

  deploy:
    name: Deploy to AWS
    needs: build
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    environment: production
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_DIR }}/dist
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to S3
        run: |
          aws s3 sync ${{ env.FRONTEND_DIR }}/dist/ s3://${{ secrets.AWS_S3_BUCKET }} \
            --delete \
            --cache-control "public, max-age=31536000"
      
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  notify:
    name: Notify Status
    needs: [test, build, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Determine status
        id: status
        run: |
          if echo '${{ toJSON(needs) }}' | grep -q '"result":"failure"'; then
            echo "status=❌ Failed" >> $GITHUB_OUTPUT
            echo "color=#ff0000" >> $GITHUB_OUTPUT
          else
            echo "status=✅ Succeeded" >> $GITHUB_OUTPUT
            echo "color=#36a64f" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ steps.status.outputs.color }}
          SLACK_TITLE: "Frontend Pipeline ${{ steps.status.outputs.status == '✅ Succeeded' && 'Succeeded' || 'Failed' }}"
          SLACK_MESSAGE: |
            *Workflow*: ${{ github.workflow }}
            *Status*: ${{ steps.status.outputs.status }}
            *Commit*: ${{ github.sha }}
            *Branch*: ${{ github.ref_name }}
            *Run*: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            